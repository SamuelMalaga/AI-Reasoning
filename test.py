from grid import *
from node_BFS import *
from algorithm_bfs import *
import pandas as pd
import time  
from node_DFS import Node
from algorithm_dfs import basicDFS, DFS_len_filter
import pandas as pd
from collections import defaultdict



# Define el grid de prueba
test_grid_input = {
    1: [("A", 3, {1: "1D(1)"}), ("d", 3, {1: "1A(1)", 3: "2A(1)"})],
    2: [("A", 4, {1: "1D(3)"})]
}

#3 words
grid1 = {
    1: [("A", 3, {2: "2D(1)"})],
    2: [("D", 3, {1: "1A(2)"})],
    3: [("A", 4, {2: "2D(2)"})],
}

#5 words
grid2 = {
    1: [("A", 4, {1: "2D(1)", 3: "3D(1)"})],
    2: [("D", 4, {1: "1A(1)", 3: "4A(2)"})],
    3: [("D", 3, {1: "1A(3)"})],
    4: [("A", 3, {2: "2D(3)"})],
    5: [("D", 3, {1: "4A(2)"})],
}

#7 words
grid3 = {
    1: [("A", 5, {2: "2D(1)", 4: "3D(1)"})],
    2: [("D", 4, {1: "1A(2)", 3: "4A(1)"})],
    3: [("D", 3, {1: "1A(4)", 2: "5A(2)"})],
    4: [("A", 3, {1: "2D(3)"})],
    5: [("A", 4, {2: "3D(2)"})],
    6: [("D", 3, {1: "5A(3)"})],
    7: [("A", 3, {2: "6D(2)"})],
}

#10 words
grid4 = {
    1: [("A", 5, {1: "2D(1)", 3: "3D(1)", 5: "4D(1)"})],
    2: [("D", 5, {1: "1A(1)", 3: "5A(1)"})],
    3: [("D", 4, {1: "1A(3)", 2: "6A(2)"})],
    4: [("D", 4, {1: "1A(5)", 2: "7A(3)"})],
    5: [("A", 4, {2: "2D(3)", 3: "6D(2)"})],
    6: [("A", 4, {2: "3D(2)"})],
    7: [("A", 5, {3: "4D(2)"})],
    8: [("D", 3, {1: "5A(2)"})],
    9: [("D", 4, {2: "6A(3)"})],
    10:[("A", 3, {2: "9D(2)"})]
}

#12 words
grid5 = {
    1: [("A", 6, {2: "2D(1)", 4: "3D(1)", 6: "4D(1)"})],
    2: [("D", 6, {1: "1A(2)", 3: "5A(1)", 5: "6A(3)"})],
    3: [("D", 5, {1: "1A(4)", 2: "7A(2)"})],
    4: [("D", 5, {1: "1A(6)", 2: "8A(3)"})],
    5: [("A", 4, {2: "2D(3)"})],
    6: [("A", 5, {3: "2D(5)"})],
    7: [("A", 3, {2: "3D(2)"})],
    8: [("A", 4, {2: "4D(3)"})],
    9: [("D", 3, {1: "5A(2)"})],
    10: [("D", 4, {2: "6A(3)"})],
    11: [("D", 5, {1: "7A(1)", 2: "8A(2)"})],
    12: [("A", 4, {2: "11D(2)"})]
}